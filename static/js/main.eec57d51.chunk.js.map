{"version":3,"sources":["components/constants.js","components/LanguageDropdown.js","components/Header.js","components/Page.js","pages/HomePage.js","pages/AboutPage.js","utils/GoogleAnalytics.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["LANGUAGES","TITLE","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","darkRedBlock","backgroundColor","height","width","redBlock","iconButton","display","flexDirection","color","locale","padding","LanguageDropdown","props","onChangeLocale","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","options","keys","handleClose","IconButton","className","onClick","event","currentTarget","Typography","Menu","keepMounted","onClose","map","option","MenuItem","key","selected","onChange","toolbar","justifyContent","HideOnScroll","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","Header","Fragment","AppBar","position","Toolbar","Page","elevation","rest","titleLabel","isEmpty","includes","get","Paper","square","Helmet","defaultProps","HomePage","AboutPage","GoogleAnalytics","this","logPageChange","location","pathname","search","prevLocation","isDifferentPathname","isDifferentSearch","page","ReactGA","set","origin","pageview","Component","component","initialize","Content","basename","GA","exact","path","App","state","handleChangeLocale","bind","setState","style","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAAaA,EAAY,CACvB,QAAS,eACT,QAAS,WAaEC,EAAQ,CACnB,QAXkB,CAClB,KAAQ,eACR,MAAS,gBAUT,QAPkB,CAClB,KAAQ,OACR,MAAS,U,iBCGLC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,GAEZK,aAAc,CACZC,gBAAiB,UACjBC,OAAQT,EAAMK,QAAQ,GACtBK,MAAO,QAETC,SAAU,CACRH,gBAAiB,UACjBC,OAAQT,EAAMK,QAAQ,GACtBK,MAAO,QAETE,WAAY,CACVC,QAAS,OACTC,cAAe,MACfC,MAAO,QAETC,OAAQ,CACNC,QAASjB,EAAMK,QAAQ,EAAG,SAqEfa,EAjEU,SAACC,GAAW,IAEjCH,EAEEG,EAFFH,OACAI,EACED,EADFC,eAGIC,EAAUvB,IANkB,EAQFwB,IAAMC,SAAS,MARb,mBAQ3BC,EAR2B,KAQjBC,EARiB,KAS5BC,EAAOC,QAAQH,GACfI,EAAUC,IAAKjC,GAWfkC,EAAc,WAClBL,EAAY,OAGd,OACE,6BACE,kBAACM,EAAA,EAAD,CACEC,UAAWX,EAAQT,WACnBqB,QAjBc,SAACC,GACnBT,EAAYS,EAAMC,iBAkBd,kBAAC,IAAD,MAEA,kBAACC,EAAA,EAAD,CAAYJ,UAAWX,EAAQL,QAC5BpB,EAAUoB,IAGb,kBAAC,IAAD,OAGF,kBAACqB,EAAA,EAAD,CACEb,SAAUA,EACVc,aAAW,EACXZ,KAAMA,EACNa,QAAST,GAERF,EAAQY,KAAI,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLG,SAAUH,IAAWzB,EACrBiB,QAAS,YAlCF,SAACQ,GAChBrB,EAAeqB,GACfX,IAgCyBe,CAASJ,KAEzB7C,EAAU6C,UCvFjB3C,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,GAEZK,aAAc,CACZC,gBAAiB,UACjBC,OAAQT,EAAMK,QAAQ,GACtBK,MAAO,QAETC,SAAU,CACRH,gBAAiB,UACjBC,OAAQT,EAAMK,QAAQ,GACtBK,MAAO,QAEToC,QAAS,CACPtC,gBAAiB,OACjBO,MAAO,OACPb,SAAU,EACV6C,eAAgB,cAIdC,EAAe,SAAC7B,GAAW,IACvB8B,EAAqB9B,EAArB8B,SAAUC,EAAW/B,EAAX+B,OAIZC,EAAUC,YAAiB,CAAEC,OAAQH,EAASA,SAAWI,IAE/D,OACE,kBAACC,EAAA,EAAD,CAAOC,QAAQ,EAAOC,UAAU,OAAOC,IAAKP,GACzCF,IAuCQU,EAlCA,SAACxC,GAAW,IAEvBH,EAEEG,EAFFH,OACAI,EACED,EADFC,eAGIC,EAAUvB,IAEhB,OACE,kBAAC,IAAM8D,SAAP,KACE,kBAAC,EAAiBzC,EAChB,kBAAC0C,EAAA,EAAD,CAAQC,SAAS,UACf,yBAAK9B,UAAWX,EAAQd,eACxB,yBAAKyB,UAAWX,EAAQV,WACxB,kBAACoD,EAAA,EAAD,CAAS/B,UAAWX,EAAQyB,SAC1B,kBAAC,EAAD,CACE9B,OAAQA,EACRI,eAAgBA,KAGpB,yBAAKY,UAAWX,EAAQV,WACxB,yBAAKqB,UAAWX,EAAQd,mB,2FC7D5ByD,EAAO,SAAC7C,GAAW,IAErBa,EAMEb,EANFa,UACAiB,EAKE9B,EALF8B,SACAgB,EAIE9C,EAJF8C,UACAjD,EAGEG,EAHFH,OACAV,EAEEa,EAFFb,MACG4D,EAPiB,YAQlB/C,EARkB,uDAUlBgD,EAAa7D,EAKjB,OAJK8D,IAAQpD,IAAWqD,IAASxC,IAAKhC,GAAQmB,KAC5CmD,EAAaG,IAAIzE,EAAMmB,GAASV,IAAUA,GAI1C,kBAACiE,EAAA,EAAD,eACEvC,UAAWA,EACXiC,UAAWA,EACXO,QAAM,GACFN,GAEJ,kBAACO,EAAA,EAAD,KACE,+BAAQN,IAETlB,IAKPe,EAAKU,aAAe,CAClBT,UAAW,EACXjD,OAAQ,GACRV,MAAO,IAWM0D,QCpDTlE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJO,gBAAiB,eAuBNmE,EAlBE,SAACxD,GAAW,IAEzBH,EACEG,EADFH,OAGIK,EAAUvB,IAEhB,OACE,kBAAC,EAAD,CACEkC,UAAWX,EAAQpB,KACnBe,OAAQA,EACRV,MAAM,QAHR,SCAWsE,EAfG,SAACzD,GAAW,IAE1BH,EACEG,EADFH,OAGF,OACE,kBAAC,EAAD,CACEA,OAAQA,EACRV,MAAM,SAFR,U,gBCLEuE,E,kLAEEC,KAAKC,cACDD,KAAK3D,MAAM6D,SAASC,SACpBH,KAAK3D,MAAM6D,SAASE,U,4CAIoB,IAAjBC,EAAgB,EAA1BH,SAA0B,EACAF,KAAK3D,MAAxC6D,SAAYC,EADuB,EACvBA,SAAUC,EADa,EACbA,OACxBE,EAAsBH,IAAaE,EAAaF,SAChDI,EAAoBH,IAAWC,EAAaD,QAE9CE,GAAuBC,IACvBP,KAAKC,cAAcE,EAAUC,K,oCAIvBD,GAAwB,IAAdC,EAAa,uDAAJ,GACvBI,EAAOL,EAAWC,EADS,EAEZhC,OAAb8B,EAFyB,EAEzBA,SACRO,IAAQC,IAAR,aACIF,OACAN,SAAS,GAAD,OAAKA,EAASS,QAAd,OAAuBH,IAC5BR,KAAK3D,MAAMS,UAElB2D,IAAQG,SAASJ,K,+BAIjB,OAAO,S,GA9BeK,aAmDf,GATM,kBAAM,kBAAC,IAAD,CAAOC,UAAWf,KAS9B,GAPF,WAIT,OAFAU,IAAQM,WAAW,mBAEZ,GC3BIC,GAjBC,SAAC3E,GAAW,IAExBH,EACEG,EADFH,OAGF,OACE,kBAAC,IAAD,CAAQ+E,SAAS,KACdC,MAAa,kBAAC,GAAD,MACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIN,UAAW,kBAAM,kBAAC,EAAD,CAAU5E,OAAQA,OACzD,kBAAC,IAAD,CAAOkF,KAAK,QAAQN,UAAW,kBAAM,kBAAC,EAAD,CAAU5E,OAAQA,OACvD,kBAAC,IAAD,CAAOkF,KAAK,SAASN,UAAW,kBAAM,kBAAC,EAAD,CAAW5E,OAAQA,UCYlDmF,G,kDAzBb,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IACDiF,MAAQ,CACXpF,OAAQ,SAEV,EAAKqF,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBALT,E,+DAQAtF,GACjB8D,KAAKyB,SAAS,CAAEvF,OAAQA,M,+BAIxB,OACE,yBAAKwF,MAAO,CAAE/F,OAAQ,SACpB,kBAAC,EAAD,CACEO,OAAQ8D,KAAKsB,MAAMpF,OACnBI,eAAgB0D,KAAKuB,qBAEvB,kBAAC,GAAD,CAASrF,OAAQ8D,KAAKsB,MAAMpF,c,GArBlB2E,aCOEhE,QACW,cAA7BuB,OAAO8B,SAASyB,UAEe,UAA7BvD,OAAO8B,SAASyB,UAEhBvD,OAAO8B,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,GAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eec57d51.chunk.js","sourcesContent":["export const LANGUAGES = {\r\n  'zh-TW': '中文',\r\n  'en-US': 'English'\r\n}\r\n\r\nconst TITLE_ZH_TW = {\r\n  'Home': '主頁',\r\n  'About': '關於'\r\n}\r\n\r\nconst TITLE_EN_US = {\r\n  'Home': 'Home',\r\n  'About': 'About'\r\n}\r\n\r\nexport const TITLE = {\r\n  'zh-TW': TITLE_ZH_TW,\r\n  'en-US': TITLE_EN_US\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Translate from '@material-ui/icons/Translate'\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { LANGUAGES } from './constants'\r\nimport keys from 'lodash/keys'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  darkRedBlock: {\r\n    backgroundColor: '#8b0000',\r\n    height: theme.spacing(1),\r\n    width: '100%'\r\n  },\r\n  redBlock: {\r\n    backgroundColor: '#cd5c5c',\r\n    height: theme.spacing(1),\r\n    width: '100%'\r\n  },\r\n  iconButton: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    color: '#fff'\r\n  },\r\n  locale: {\r\n    padding: theme.spacing(0, 0.5)\r\n  }\r\n}));\r\n\r\nconst LanguageDropdown = (props) => {\r\n  const {\r\n    locale,\r\n    onChangeLocale\r\n  } = props\r\n\r\n  const classes = useStyles()\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const options = keys(LANGUAGES)\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const onChange = (option) => {\r\n    onChangeLocale(option)\r\n    handleClose()\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        className={classes.iconButton}\r\n        onClick={handleClick}\r\n      >\r\n        <Translate />\r\n\r\n        <Typography className={classes.locale}>\r\n          {LANGUAGES[locale]}\r\n        </Typography>\r\n\r\n        <KeyboardArrowDownIcon />\r\n\r\n      </IconButton>\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        {options.map((option) => (\r\n          <MenuItem\r\n            key={option}\r\n            selected={option === locale}\r\n            onClick={() => { onChange(option) }}\r\n          >\r\n            {LANGUAGES[option]}\r\n          </MenuItem>\r\n        ))}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nLanguageDropdown.propTypes = {\r\n  locale: PropTypes.string,\r\n  onChangeLocale: PropTypes.func\r\n}\r\n\r\nexport default LanguageDropdown","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport AppBar from '@material-ui/core/AppBar'\r\n\r\nimport LanguageDropdown from './LanguageDropdown'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  darkRedBlock: {\r\n    backgroundColor: '#8b0000',\r\n    height: theme.spacing(1),\r\n    width: '100%'\r\n  },\r\n  redBlock: {\r\n    backgroundColor: '#cd5c5c',\r\n    height: theme.spacing(1),\r\n    width: '100%'\r\n  },\r\n  toolbar: {\r\n    backgroundColor: '#000',\r\n    color: '#fff',\r\n    flexGrow: 1,\r\n    justifyContent: 'center'\r\n  },\r\n}));\r\n\r\nconst HideOnScroll = (props) => {\r\n  const { children, window } = props;\r\n  // Note that you normally won't need to set the window ref as useScrollTrigger\r\n  // will default to window.\r\n  // This is only being set here because the demo is in an iframe.\r\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      {children}\r\n    </Slide>\r\n  );\r\n}\r\n\r\nconst Header = (props) => {\r\n  const {\r\n    locale,\r\n    onChangeLocale\r\n  } = props\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <HideOnScroll {...props}>\r\n        <AppBar position=\"static\">\r\n          <div className={classes.darkRedBlock} />\r\n          <div className={classes.redBlock} />\r\n          <Toolbar className={classes.toolbar} >\r\n            <LanguageDropdown\r\n              locale={locale}\r\n              onChangeLocale={onChangeLocale}\r\n            />\r\n          </Toolbar>\r\n          <div className={classes.redBlock} />\r\n          <div className={classes.darkRedBlock} />\r\n        </AppBar>\r\n      </HideOnScroll>\r\n    </React.Fragment>\r\n\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  locale: PropTypes.string,\r\n  onChangeLocale: PropTypes.func\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport Paper from '@material-ui/core/Paper'\r\nimport get from 'lodash/get'\r\nimport keys from 'lodash/keys'\r\nimport includes from 'lodash/includes'\r\nimport isEmpty from 'lodash/isEmpty'\r\n\r\nimport { TITLE } from './constants'\r\n\r\nconst Page = (props) => {\r\n  const {\r\n    className,\r\n    children,\r\n    elevation,\r\n    locale,\r\n    title,\r\n    ...rest\r\n  } = props\r\n\r\n  let titleLabel = title\r\n  if (!isEmpty(locale) && includes(keys(TITLE), locale)) {\r\n    titleLabel = get(TITLE[locale], title) || title\r\n  }\r\n\r\n  return (\r\n    <Paper\r\n      className={className}\r\n      elevation={elevation}\r\n      square\r\n      {...rest}\r\n    >\r\n      <Helmet>\r\n        <title>{titleLabel}</title>\r\n      </Helmet>\r\n      {children}\r\n    </Paper>\r\n  )\r\n}\r\n\r\nPage.defaultProps = {\r\n  elevation: 0,\r\n  locale: \"\",\r\n  title: \"\"\r\n}\r\n\r\nPage.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.any,\r\n  elevation: PropTypes.number,\r\n  locale: PropTypes.string,\r\n  title: PropTypes.string,\r\n}\r\n\r\nexport default Page","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Page from '../components/Page'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#808080\",\r\n    // height: '100vh'\r\n  },\r\n}));\r\n\r\nconst HomePage = (props) => {\r\n  const {\r\n    locale\r\n  } = props\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      locale={locale}\r\n      title=\"Home\"\r\n    >\r\n      home\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default HomePage;","import React from 'react'\r\n\r\nimport Page from '../components/Page'\r\n\r\nconst AboutPage = (props) => {\r\n  const {\r\n    locale\r\n  } = props\r\n\r\n  return (\r\n    <Page\r\n      locale={locale}\r\n      title=\"About\"\r\n    >\r\n      About\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default AboutPage","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\nclass GoogleAnalytics extends Component {\r\n    componentDidMount() {\r\n        this.logPageChange(\r\n            this.props.location.pathname,\r\n            this.props.location.search\r\n        );\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }) {\r\n        const { location: { pathname, search } } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname, search = '') {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nGoogleAnalytics.propTypes = {\r\n    location: PropTypes.shape({\r\n        pathname: PropTypes.string,\r\n        search: PropTypes.string\r\n    }).isRequired,\r\n    options: PropTypes.object\r\n};\r\n\r\nconst RouteTracker = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init = (options = {}) => {\r\n\r\n    ReactGA.initialize(\"UA-174207840-1\");\r\n\r\n    return true;\r\n};\r\n\r\nexport default {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init\r\n};","import React from 'react';\r\n\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport HomePage from '../pages/HomePage'\r\nimport AboutPage from '../pages/AboutPage'\r\n\r\nimport GA from '../utils/GoogleAnalytics'\r\n\r\nconst Content = (props) => {\r\n  const {\r\n    locale\r\n  } = props\r\n\r\n  return (\r\n    <Router basename=\"/\">\r\n      {GA.init() && <GA.RouteTracker />}\r\n      <Switch>\r\n        <Route exact path=\"/\" component={() => <HomePage locale={locale} />} />\r\n        <Route path=\"/home\" component={() => <HomePage locale={locale} />} />\r\n        <Route path=\"/about\" component={() => <AboutPage locale={locale} />} />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default Content;","import React, { Component } from 'react'\r\n\r\nimport Header from './components/Header'\r\nimport Content from './components/Content'\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      locale: 'zh-TW'\r\n    }\r\n    this.handleChangeLocale = this.handleChangeLocale.bind(this)\r\n  }\r\n\r\n  handleChangeLocale(locale) {\r\n    this.setState({ locale: locale })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ height: '100%' }}>\r\n        <Header\r\n          locale={this.state.locale}\r\n          onChangeLocale={this.handleChangeLocale}\r\n        />\r\n        <Content locale={this.state.locale} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}