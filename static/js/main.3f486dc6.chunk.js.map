{"version":3,"sources":["components/Header.js","components/Page.js","pages/HomePage.js","pages/AboutPage.js","utils/GoogleAnalytics.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","darkRedBlock","backgroundColor","height","width","redBlock","Header","props","locale","console","log","classes","AppBar","position","className","Toolbar","Page","children","elevation","rest","Paper","square","Helmet","defaultProps","HomePage","AboutPage","GoogleAnalytics","this","logPageChange","location","pathname","search","prevLocation","isDifferentPathname","isDifferentSearch","page","window","ReactGA","set","origin","options","pageview","Component","component","initialize","Content","basename","GA","exact","path","App","state","style","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f486dc6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport AppBar from '@material-ui/core/AppBar'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  darkRedBlock: {\r\n    backgroundColor: '#8b0000',\r\n    height: theme.spacing(1),\r\n    width: '100%'\r\n  },\r\n  redBlock: {\r\n    backgroundColor: '#cd5c5c',\r\n    height: theme.spacing(1),\r\n    width: '100%'\r\n  }\r\n}));\r\n\r\nconst Header = (props) => {\r\n  const {\r\n    locale\r\n  } = props\r\n  console.log(locale)\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <div className={classes.darkRedBlock} />\r\n      <div className={classes.redBlock} />\r\n      <Toolbar>\r\n\r\n      </Toolbar>\r\n      <div className={classes.redBlock} />\r\n      <div className={classes.darkRedBlock} />\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nconst Page = (props) => {\r\n  const {\r\n    className,\r\n    children,\r\n    elevation,\r\n    title,\r\n    ...rest\r\n  } = props\r\n  return (\r\n    <Paper\r\n      className={className}\r\n      elevation={elevation}\r\n      square\r\n      {...rest}\r\n    >\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      {children}\r\n    </Paper>\r\n  )\r\n}\r\n\r\nPage.defaultProps = {\r\n  elevation: 0,\r\n  title: \"\"\r\n}\r\n\r\nPage.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.any,\r\n  elevation: PropTypes.number,\r\n  title: PropTypes.string,\r\n}\r\n\r\nexport default Page","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Page from '../components/Page'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#808080\",\r\n    // height: '100vh'\r\n  },\r\n}));\r\n\r\nconst HomePage = () => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Home\"\r\n    >\r\n      home\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default HomePage;","import React from 'react'\r\n\r\nimport Page from '../components/Page'\r\n\r\nconst AboutPage = () => {\r\n  return (\r\n    <Page title=\"About\">\r\n      About\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default AboutPage","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\nclass GoogleAnalytics extends Component {\r\n    componentDidMount() {\r\n        this.logPageChange(\r\n            this.props.location.pathname,\r\n            this.props.location.search\r\n        );\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }) {\r\n        const { location: { pathname, search } } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname, search = '') {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nGoogleAnalytics.propTypes = {\r\n    location: PropTypes.shape({\r\n        pathname: PropTypes.string,\r\n        search: PropTypes.string\r\n    }).isRequired,\r\n    options: PropTypes.object\r\n};\r\n\r\nconst RouteTracker = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init = (options = {}) => {\r\n\r\n    ReactGA.initialize(\"UA-174207840-1\");\r\n\r\n    return true;\r\n};\r\n\r\nexport default {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init\r\n};","import React from 'react';\r\n\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport HomePage from '../pages/HomePage'\r\nimport AboutPage from '../pages/AboutPage'\r\n\r\nimport GA from '../utils/GoogleAnalytics'\r\n\r\nconst Content = (props) => {\r\n  const {\r\n    locale\r\n  } = props\r\n\r\n  return (\r\n    <Router basename=\"/\">\r\n      {GA.init() && <GA.RouteTracker />}\r\n      <Switch>\r\n        <Route exact path=\"/\" component={() => <HomePage locale={locale} />} />\r\n        <Route path=\"/home\" component={() => <HomePage locale={locale} />} />\r\n        <Route path=\"/about\" component={() => <AboutPage locale={locale} />} />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default Content;","import React, { Component } from 'react'\r\n\r\nimport Header from './components/Header'\r\nimport Content from './components/Content'\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      locale: 'zh-TW'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ height: '100%' }}>\r\n        <Header locale={this.state.locale} />\r\n        <Content locale={this.state.locale} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}